Version 3.9.17
- Fixed a serious unsigned / unsigned division bug
- Fixed indirect calls involving structure members
- Fixed promotion of word and byte arguments to functions
- Fixed a typo in the printf code for handling width
- Fixed catch/throw/setjmp/longjmp to correctly restore local variables
- Accept line numbers in BASIC programs
- Added <sys/p2_clock.h> for calculating P2 clock frequency

Version 3.9.16
- Check environment variable FLEXCC_INCLUDE_PATH for included files
- Better relative path finding for include files thanks to David Betz
- Added register keyword for C
- Moved P2 CLKFREQ and CLKMODE longs down to initial hub memory; fixes a memory corruption issue with coginit/cognew
- Implemented struct initialization for C
- Implemented initializing function pointers
- Implemented __builtin_cogstart in C
- Fixed some bugs in indexing arrays of large types
- Fixed problems with using @RESULT in Spin
- Removed use of _wfopen_s in the C preprocessor for Windows

Version 3.9.15
- Fixed abort/catch in P2
- Fixed a problem with quotes in strings
- Fixed potential name conflict with labels, and improved optimization of branches as a side benefit
- Added -H and -E flags to fastspin to allow changing HUB start address. For example, `fastspin -2 -H 0x10000 -E foo.bas` compiles a program to load and execute at address 65536. If the `-E` is left off then it still loads at 0, but is padded to start executing at 0x10000.
- Added some more C library functions

Version 3.9.14
- Fixed a bug where function parameters to Spin functions without type specifiers could be coerced to the wrong type
- Improved C compatibility of various register declarations
- Implemented __builtin_alloca
- Improved optimization of P2 pin functions
- Support multiple statements per line in BASIC
- Implemented DEFSNG and DEFINT in BASIC
- Added optional xsel parameter to P2 clkset function
- Fixed a bug with types in function closures
- Added dirh_, drvh_, flth_, outh_, and similar functions to Spin in P2 mode

Version 3.9.13
- Fixed runtime to get P2 code running on P2 EVAL boards
- Added _setbaud function to change baud rate
- Allow coginit/cognew of function pointers and functions from other
  objects.
- Fixed the BASIC HEAPSIZE constant.
- Implemented "option base" for BASIC, and made "option base 0" the default
- Added "struct __using" and "__fromfile" to C
- Fixed an optimizer bug which affected some FullDuplexSerialversions
- Fixed a preprocessor bug where defines starting with _ were not expanded
- Fixed "dim shared" syntax to match other dim syntaxes
- Reserved DATA, READ, RESTORE keywords in BASIC
- Fixed some P2 optimization bugs

Version 3.9.12
- Fixed a BASIC operator precedence problem (<< and >> should have
  been like * and /)
- Allowed plain EXIT and CONTINUE in BASIC
- Added varargs to C
- Implemented switch in C
- Implemented enums in C
- Implemented static variables in C
- Added inline assembly to C
- Began implementation of structs in C

Version 3.9.11
- Added tail call optimization
- Added simple optimization based on commutative math
- Optimize for loops counting down to 0
- Implemented case sensitivity for C, and an optional -C flag
  to force case sensitivity in other languages
- Fixed a number of type parsing problems in C
- Added a new preprocessor (mcpp) for C
- Report an error if ORGH tries to go backwards
- Added support for more kinds of operands in inline assembly
- Added -D__FLEXSPIN__, -D__FLEXBASIC__, and -D__FLEXC__ defines for
  future compatibility (someday this tool will be renamed).
- Look in {argv[0]}/../include for include files by default

Version 3.9.10
- Added a peephole optimizer to replace "mov x, #0 ; add x, y" with
  "mov x, y"
- Added sqrt() operator to BASIC
- Fixed a problem with passing (some) floating point parameters to functions
- Fixed another REP bug in the P2 optimizer
- Fixed cognew/coginit return value when no free cog is available
- Fixed another CSE bug
- Fixed a floating point display bug (E notation was off by one)
- #ifdef/#endif around #include was broken, fixed now
- Many improvements to the C frontend

Version 3.9.9
- Use P2 encod instruction for >| operator
- Allow x.y expressions to reference constants in an object
- Removed WORD from BASIC types
- Fixed a bug in converting DJNZ to REP in P2 code
- Fixed unsigned divide and remainder in BASIC and C

Version 3.9.8
- Added __propeller__ symbol to preprocessor
- Added SELECT CASE to BASIC
- Fixed a nasty buffer overflow in integer prints
- Fixed close #n (it was losing the object pointer)
- Fixed an optimizer bug in replacing registers
- Fixed an assembly output bug when the input contains only leaf
  functions
- Made for loops with float variables work
- Fixed missing _rx function for P2

Version 3.9.7
- Fixed a bug in converting float values to integer
- Fixed a bug in handling local arrays
- Fixed an error in determining types of memory references
- Used builtin functions to push/pop collections of variables (reduces
  HUB size)
- Added syntax for initializing arrays in BASIC
- Fixed some Mac build issues (thanks to David Betz)

Version 3.9.6
- Re-use the same set of registers for all functions in LMM mode,
  saving/restoring them on function entry/exit. This saves a *lot* of
  COG memory, at the cost of some execution speed and HUB space.
- Added try/catch and LEN to BASIC
- Added anonymous functions and closures to BASIC
- Clean up properly after \ is used without an abort happening
- abort now exits if there is no \ to catch it
- Fixed a bug where methods were incorrectly marked as used

Version 3.9.5
- Fixed stack allocation when HUB bss is removed (-O2 option)
- Implemented global variables
- Updated BASIC I/O functions

Version 3.9.4
- Report errors for use of private methods
- Fixed an optimizer bug that could cause the compiler to crash
- Fixed output of repeated strings of non-zero bytes in the DAT
  section
- Many improvements to BASIC

Version 3.9.3
- Allow backquote (`) to quote special characters in Spin identifiers
- Fixed handling of '(expr)[N]' in PASM blocks
- Fixed lookup of files which have extensions different from .spin
- Fixed an overlooked check for dead registers in optimization
- Added garbage collection and string handling to BASIC.

Version 3.9.2
- Error messages are now formatted as:
    filename.spin(#) error: xxxx
  which is more like openspin and matches FreeBASIC
- Made -l option work properly with DAT output
- Fixed a regression in Spin object pointers
- Fixed operator precedence of the boolean "NOT" operator in Spin
- Fixed an over-agressive optimization
- Added +< and similar unsigned comparison operators to Spin
- Implemented floating point for BASIC, plus many other BASIC
  improvements

Version 3.9.1
- Fixed some bugs in common subexpression elimination
- Fixed conditional instructions in inline assembly
- Improved loop strength reduction optimizations
- Added missing popa instruction for P2, also missing rd/wr address mode
- Added +/ and +// unsigned division operators to Spin
- Started work on BASIC support. This is not complete yet (it won't be
  until 4.0.0).
  
Version 3.8.7
- Improved constant propagation for REP instructions
- Fixed addresses for listing in P1 mode
- Fixed an optimization problem where hw registers could be used
  to hold intermediate values in a calculation
- Fixed relocations for @@@ calculations
- Moved utility functions like longfill into HUB memory to free space
- Added --fcache=N option to fastspin
- Fixed BSS removal optimization for P2

Version 3.8.6
- Added P2 optimization to use REP instruction when possible
- Fixed ##label arguments to rdbyte/wrlong/etc.
- Fixed a bug where aliases like neg a -> neg a,a could generate
  incorrect code
- Fixed CSE where hardware registers are set so that they do not
  invalidate all entries
- Made some improvements to listing files

Version 3.8.5
- Improve inline assembly: allow labels
- Fix string constants in case labels (they should be treated as
  lists)
- Big revision of how listing files are created. This is worse for all
  assembly files (DAT section output is a bit weaker) but much better
  for regular Spin files, which can now have listing files.
- Fixed coginit of Spin methods in P2
- Add a check for recursive symbol definition

Version 3.8.4
- Automatically promote literal strings to string("foo") if they are
  being passed to a function that expects a pointer
- Fixed lockset() on P2 (C flag behavior differs between P1 and P2)
- Changed default hub start for P2 from $800 to $400
- Provide some inline assembly support for C/C++

Version 3.8.3
- Allow multiple return values to in turn be passed to functions as
  parameters
- Allow default values for parameters. So far these must be constant
- added Spin2 <=>, \, and XOR operators
- Fixed a CSE bug with loops containing multiple assignments

Version 3.8.2
- Added warning for instructions that should set C or Z flags not
  doing so

Version 3.8.1
- Added -l flag to fastspin to produce a listing file
- Fixed multiple returns from functions with no parameters
- Added pusha, pushb, modc, modz aliases for P2 instructions
- Various fixes for P2 binary output

Version 3.8.0
- Added multiple assignments like (x,y) := (y,x)
- Added ability for functions to return multiple values
- Made the preprocessor work correctly with Mac encoded files (CR for
  end of line)
- Made fastspin -w work correctly in P2 mode
- if fastspin is named something ending with "spin2" (like
  "fastspin2") then it will start in Propeller2 mode by default
- if no Spin methods are present, do not emit any of the Spin
  initialization code, just output the DAT section 
- simplified parsing of \ expressions

Version 3.7.2
- Updated P2 support to v32
- Fixed some bugs in common subexpression elimination
- Made the --nocse flag to spin2cpp actually work
- Fixed labels at end of input
- Fixed @result in assembly output

Version 3.7.1
- Fixed a nasty bug in assignment operators ("a[i++] += b" was being
  treated as "a[i++] = a[i++] + b", which is obviously wrong)

Version 3.7.0
- Added the -w flag to fastspin to allow creation of assembly language
  wrappers for Spin methods. See docs/SpinPasmIntegration.md for
  details.
- fastspin -O now removes hub bss variables (the VAR block) from the
  .binary; this does not change the actual memory usage at run time,
  but does result in a smaller .binary and hence faster download
- fastspin and spin2cpp no longer have to call themselves to compile
  the .pasm for a --asm binary output
- Better error messages for unexpected characters in the source
- Added strength reduction for multiplication and subtraction
- Convert more loops to use djnz
- Added simplified loop test for loops where the step value is
  constant
- Various other minor optimizations

Version 3.6.6
- Minor tweak to LMM return code
- Use bstc mode in fastspin only if the program name starts with bstc

Version 3.6.5
- Fixed asm output segmentation fault on Debian 64 bit

Version 3.6.4
- Fixed output of const symbols in gas mode
- Fix a hang with --dat --gas output
- In P2 mode, handle hub symbols more like PNut (so usually use byte
  address rather than long address).
- Fixed compilation of getnib, getbyte instructions in P2
- Added check for correct number of operands for instructions found in
  inline assembly
- Added a --require= option to check the version number being used
  
Version 3.6.3
- In --asm --binary mode, delete the final output binary name if
  compilation to assembly fails.
- Fixed a bug in handling C++ methods forced to be static due to
  their use in cognew
- Fixed another optimizer bug (forward propagation of constants was
  crossing call boundaries, which caused problems with things changed
  by the call)
- Fixed immediates on destinations in P2 (like rdfast #0, foo)
- Implemented 3 operand P2 instructions like getbyte, setnib, and
  fixed a few other missing P2 instructions

Version 3.6.2
- fastspin can now compile to binary for P2
- Fixed an optimizer bug where it tried to change INA from a src in
  one instruction to a dest in another (INA as dest points to RAM
  rather than register)
- Fixed preprocessor handling of quoted characters
- Partially updated P2 instructions to v18

Version 3.6.1
- fixed a bogus error about function symbols used as array
  dereferences
- fixed type casting of function return values used in expressions

Version 3.6.0

- added Spin2 style object declarations and casts
- PASM output did not handle arrays of objects correctly, now it does
- fixed a preprocessor bug with #ifdef

Version 3.5.1

- Fixed incorrect output of float expressions in --gas mode.
- Fixed a problem with the name of the ..dat_start in --gas mode if the
  base file name contains spaces
- Added a C / C++ options dialog to spinconvert
- Updated copyright notices.

Version 3.5.0

- Added type inference so that C/C++ code has types that are more
  like what a human programmer would add.
- Fixed a problem with assignments inside other operators (evaluation
  was not in the same order as traditional Spin)
  
Version 3.4.1

- Fixed an issue with the not operator on its own (should have
  been turned into an assignment)
  
Version 3.4.0

- Completely revamped --gas output to make it easier to edit and
  to support some constructs (like multiple .org) that could not
  be used in earlier versions of --gas. DAT sections in --gas are
  now quite human readable (and more importantly, modifyable).
- Preserve DAT section comments in --gas output.
- Changed #define for constants so that we can distinguish constants
  in different objects.
  
Version 3.2.3

- Added --side option to create a SimpleIDE .side file.

Version 3.2.2

- Fix coginit/cognew of Spin methods in C mode
- Added --version flag (also -v)
- Fixed a problem with calculating labels after DAT section
  expressions like FOO[3]

Version 3.2.1

- Print (some) PASM comments in gas output
- Fixed -c switch for fastspin
- Fixed a bug with multiple coginits
- Fixed a bug in translation of wordfill/bytefill to C
- Make coginit/cognew of Spin methods work with old PropGCC library

Version 3.2.0

- Use a simpler, faster multiply routine if the program never needs
  the upper 32 bits of the result.
- Added code for optimizing divides by integer powers of 2
- Fixed a bug printing non-ASCII characters
- Fixed several issues preventing the S3 source code from converting
  to C.
- Use C "switch" statements for Spin case where all the labels are
  constant
- Add basic common subexpression elimination option (--cse). This is
  not enabled by default because it still has some issues.

Version 3.1.3

- Use "res" for FCACHE space
- Fix bug involving local variables that are arrays
- Improve re-use of variable memory
- Optimize away some redundant branches

Version 3.1.2

- Use "res" instead of "long" to define the object block
- Slightly improve loop optimization by re-arranging optimize passes
- Fix multi-pin assignments to be atomic
- If fastspin.exe is invoked as bstc.exe, it tries to mimic bstc's
  output.

Version 3.1.1

- Make leaf functions share temporary registers and local variables
- Do not inline functions whose calling conventions
  require stack manipulation

Version 3.1.0

- Added (preliminary) --p2 support for Propeller 2.
- Added fcache support for Propeller 1.
- If a function is called only once, and we can eliminate it by
  inlining it, do so.
  
Version 3.0.6

- Added a check to make sure the immediate is on the right operand
  (previously "mov #2, 3" was parsed the same as "mov 2, #3")

Version 3.0.5

- Added --eeprom option to produce an EEPROM file
- Added --cc= option to change C compiler
- Improved optimization of pin masks in some cases
- Allow {++ ... } to insert C++/C code inside PUB or PRI.
- Changed the __SPIN2X__ define to __SPINCVT__. The old __SPIN2X__
  symbol is still defined in the preprocessor for now, but is deprecated.
- Added a fastspin front end that mimics the openspin arguments.

Version 3.0.4

- Tweaked a few items in the GUI

Version 3.0.3

- Fixed a problem with the round() function not being recognized in
  C/C++ code, and with round() and trunc() output.
- Fixed abort with no explicit expression in C/C++

Version 3.0.2

- Added support for SPR and for arrays in cog memory generally.
- Allowed --data=cog

Version 3.0.1

- Fixed the distributed .zip file to have the correct spin2cpp
  versions.
- Added a Spin prefix function for --asm output (so other Spin
  compiler may be used)


Version 3.0.0

- Added a code generator to allow for PASM output. spin2cpp --asm can
  function as a compiler independent of PropGCC. With --code=hub it
  will produce LMM code, otherwise it produces COG code. Using
  --binary after --asm will cause a final binary to be produced. Using
  -g after --asm will cause the original Spin code to be inserted in
  the .pasm output.
- Added a simple GUI (spinconvert). See the Help option in spinconvert
  for details
- Added predefined symbols: __SPIN2CPP__ for C/C++ output,
  __SPIN2PASM__ for assembler output
- Added IF/THEN/ELSE expressions, e.g. x := IF x>0 then 0 ELSE x-1
- Extensive internal changes

==========================================================================
Version 1.96

- Made the PASM file directive search the same way we look for Spin files
- Added -I and -L options to search for files in a different path
- Functions which do not return a value are now declared as void
- Fixed coginig/cognew on Spin methods that are not static
- Some internal clean-ups

Version 1.95

- Improved detection of static member functions
- Implemented coginit/cognew for Spin methods (still WIP)
- Removed the volatile qualifier from __asm__ at top level (the C++
  parser likes it, but plain C does not)
- Added commonly used C functions like strcpy to the list of C reserved
  words that we check for name conflicts
- Fixed a preprocessor problem with long file names

Version 1.94

- Declare methods that obviously don't use object variables as "static"
- Supported the bstc @@@ operator (only in --gas mode right now)
- Implemented SPR pseudo-variable for hardware registers
- Cleaned up handling of -o option for .dat, .elf, and .binary
- Fixed some output problems in --gas mode
- Various minor bug fixes

Version 1.93

- Made for loop output more idiomatic
- Print symbolic constants rather than the values they resolve to
- Fixed illegal characters in file names used as class names
- Added some debug directives
- Made -o option more useful with --binary
- Really fixed --binary checksum setting
- Added support for setting _clkfreq and _clkmode

Version 1.92

- Made the lookup/lookdown output code compatible with more recent gccs
- Fixed --binary checksum calculation

Version 1.91

- Preserve comments in Spin code.
- Recognize foo.long[N] syntax.
- Use C for loops for more Spin repeat loops.
- Use memset for the common case of filling memory with 0.
- Added clksPet and clkmode.
- Preserve original case of Spin identifiers (unless --normalize is
  given).
- Automatically add volatile qualifier to class variables if some
  class members are accessed via the address operator.
- Added --catalina option to run convert to C then run Catalina C compiler.

Version 1.05

- Fixed a problem with double negation or negation of boolean operators
  being printed as a predecrement.
- Fixed usage of ID[n] in PASM code (where ID is a constant).

Version 1.04

- Fix precedence of NOT operator
- Add quoting for spaces inside file names
- Produce an error for redefined labels in DAT sections.
- Rename constants that start with an _ to avoid conflicts with C.
- Fix "reversed" range expressions like OUTA[9..10].

Version 1.03

- Use for() loop instead of do/while for simple counting loops
- Added a -o option to specify the output file name
- Fixed error messages after #include (so correct line number and file
  information is preserved)
- Made the search paths for #include and OBJ sections relative to the
  currently processed file.
- Added --binary output option to produce a .binary file
- Fixed a bug in the DAT section output for classes with names that
  have "Spin" appended.
- Fixed DAT section output in C mode.
- Fixed several other miscellaneous bugs.

Version 1.02

- Made CON section accept x[y] syntax for skipping over ranges of values
- Modified C/C++ output so that unused return values are not declared
- Fixed reboot command to really reboot (not just abort)
- Fixed a typo which could cause segmentation faults
- Follow Spin's practice of allowing the first object of an object
  array to be used without a subscript.
- Accept annotations on the DAT section of a file.

Version 1.01

- Output symbolic names for constants instead of the constant value itself
- Added missing =>= and =<= operators
- Put the spin2cpp version number in the comment header of generated
  files

Version 1.00

- Fixed a problem with parsing negative floating point constants
- Fixed use of $ in PASM data declarations
- Some fixes to the internal source code

Version 0.99

- Added preliminary support for translating PASM to GAS (--gas)
- Added support for waitpne and waitpeq
- Fixed the trunc operator
- Fixed some issues with constants declared in other objects
- Fixed a problem with catching abort of functions with no parameters

Version 0.98

- Cleaned up and improved preprocessor
- Added #include, #elseifdef, #elseifndef
- Further improved Catalina support
- Fixed an issue with returns inside if statements
- Made error messages more consistent (now they all have the format
  "file:line: message", like Catalina and gcc)


Version 0.97

- Added a simple preprocessor similar to the one in bstc
- A comment giving the command line is output at the start of files
- Somewhat improved support for Catalina
- Some minor bugs fixes

Version 0.96 New in this version:

- preliminary support for output of C code instead of C++
- fix the order of defines so constants in one object may be used to
define constants in another object
- support for placing C code inline in the Spin code (via "annotations")
- bug fix for reverse()
- sort variables the way Spin does

Version 0.95. New in this version:

- arrays of objects
- fix outa[pin] with variable pin
- handle TAB characters correctly
- various other bug fixes

Version 0.9. New in this version:

- correct handling of files that do not end in a newline
- fixed array references
- fixed nesting of objects more than 2 deep
- work around some library and compiler issues with the abort feature
- better handling of bit set and clear
- fixed a bug preventing PASM instructions from always being aligned
- --files option to list generated .cpp files
- --elf option to automatically invoke propeller-elf-gcc to compile the .spin file
